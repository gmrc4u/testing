1.* What is Version Control System?
    ggdsjfgd
Ans: Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.  

2.* Why we need any Version Control System (v.C.S)

Ans: Version control systems helps teams to track every individual change by each contributor and helping prevent concurrent work from conflicting. Changes made in one part of the software can be incompatible with those made by another developer working at the same time. By using VCS we can revert to previous version. That's the main advantage of VCS.


3.* What is the difference between SVN and Git?

Ans: Git is a distributed VCS where as SVN is a centralized VCS.
     The content in Git is stored as source + metadata; SVN stores files of content.
     SVN is revision control system. 
  
4.* Which VCS you prefer? SVN Or Git? Why?

Ans: I prefer GIT VCS since it is a distributed version control system. Because while working on GIT, we will be having local copy of source code as local repository along with METADATA. We can work on our local repository and later we can push the changes to central or remote repository.

Where as we always has to work on central repository in case of SVN.


5.* What are the advantages of Git over SVN?

Ans: In Git as we know when we clone we will get a copy of central repository called local repository. So will naot be having much burden on server (central repository). Where as in SVN each devloper or client working directly with central server(repository) so server will be busy always.

Because of that Git is faster than SVN.

In SVN, each developer gets a working copy that points back to a single central repository.
In git instead of a working copy, each developer gets their own local repository, complete with a full history of commits.

In SVN branches will be created on central repository which will create additional burden on server.
where as in Git Branches will be created locally. Since Git branching concept is more faster than SVN.

6. Why we call Git as Distributed VCS?

Ans: Once we clone the source code from remote repository, git creates a local repository(copy of remote repository) in developers local machine along with meta data. developers no need to keep connect to remote repository. They can work on their local repository, can do what ever the changes they want to do, add the files, features, modules, etc.. Later can be pushed the changes to remote repository. So Git is called distributed version control system.


7. Can you explain Git's End-to-End work flow?


8. How do you clone the code using git?

Ans: $git clone "URL"

9.* What is the difference between Commit & Push?

Ans: Commit is used to push the staged or unstaged changes to local repository.
     Push is used to push the changes from local repository to central repository.

10.* What is the difference bet'n Push and Pull?

Ans: Push is used to push the changes from local repository to central repository.
     Pull command used to pull only the changes from remote repository to the local repository.


11. Can you explain Git architecture?




12.* What is the diff. bet'n Centralized and Distributed VCS.

13. Have you ever created Remote repositories in Git? How?

14. What happens if I delete .git folder?

15. How do you configure username, email and editor first time 
    in Git?

Ans: Username: $git config --global user.name "G MOHAN RAO"
     User Mail: $git config --global user.email "gmrc4u@gmail.com"

16. Where Git stores configuration details?

Ans: /home/chinna/.gitconfig 
       (User home)   (file)  

17.* What is the advantage of STAGE in Git?

Ans: using stage we can reset the changes to previous state in the work directory.

     $git reset head <file name>
     $git checkout <file name>
18. Git log options related questions
	--author (Ex: $git log --author="gmrc4u")
	--grep (Ex: git log --grep="few(commit message key word)")
	--oneline
	--since/until
	-n2
	File name (Ex: $git log Git_Interview_Qns.txt)
        To see exactly what has been modified ($git diff Git_Interview_Qns.txt)
	To see the changes between 2 commits (Ex: git diff 7745b90..2aa3371b)
	To see last two commits log (Ex: git log -n2)
19. What is SHA-1? How Git uses this?

20.* I have a file modified in my Working directory. How do you 
    show the content diff?

21.* How do you show the content diff of a file which is staged?

22. How do you delete and rename a file in Git?

23.** What is your branching stratogy?
	Can you explain your release process/Stratogy?

24.** What branching model you suggest for parellel development?

25. Developer fixes a bug. How do you take the change to 
    production?

25.** Explain defferent branching models that you have worked-on.

26. Did you work on merging the code in Git?

27.* How do you merge the code in Git?

28.* What is merge? What is conflict?

29. When do we get conflict?

30.* What is fast-forward merge in Git?

31.* What is the difference between Merge and Rebase?

32.* How do you resolve the conflit in Git?

34.* What kind of conflicts you have seen?

35. Who resolves the conflicts?

36.** What is the difference between branch and tag?
	When do you create a branch and tag?

37. How do you create a branch and switch to that using single 
	command?

38. What is HEAD pointer in Git? Where Git store HEAD info.

39. Can we store binary files in Git?

40. Can skip the staging? How? what are the caveats?

41.* How do you list files/folders modified as part of a commit?

42.* How do you ignore: ex:
	all files ending with .class
	all files having alphanumeric
	all log files but not build.log

43. How do you add ignore list for all users?

44.* What are the different files you ignore in your project?

45. How to remove a committed change? Or can we remove?
		$ git reset --hard HEAD~1
		$ git reset --soft HEAD~1
46. How do you lock the branch

47. How do you clone the code from a particular SHA?

48. How do you restore a deleted file? Or previous changes of
	a file?

49. How do you list the diff. of a file between two different 
	branches.
		$ git diff dev_1.2.4...master -- LoginUser.java

50. How do you list the changes which are going to be fetched? 
method:1		
		$ git fetch		
		$ git log origin/master ^master
method:2
		$ git fetch && git diff master origin/master --name-only

51. What is Git Stash?

52. How do you add a new remote to git? Or How do you attach
	your local repo with remote?

53. What is git ls-tree?
	git ls-tree <sha> --> Lists files committed as part of 
	a commit.

54.How do you clone the repository with a single/particular branch?

$ git clone -b dev_1.2.4 --single-branch https://github.com/nageshvkn/flipkart899.git

55.
How to compare two branches?
$ git diff master..dev_1234 [compare local branches]
$ git diff origin/master..origin/dev_1234 [compare remote branches]


Qns:
1. How do you revert the code which is already committed in the repository?
2. User A has deleted the file in local repository. User B modified the same file and pushed to remote. Now, when user A push'es the file what will happen?
3. How do you make local repository as remote?
4. How do you push a new branch to remote repository?
5. How do you clone a single branch?
6. How do you search a commit based on time?
7. How do you clone a single folder / file? Or is it possible in Git?

7. How do you list the changes which are fetched?
	$ git diff origin/master
8. How do you list the changes before pull/fetch?
	$ git checkout master                                                  
	$ git fetch                                        
	$ git diff origin/master
	$ git remote rm origin
	$ git remote add origin https://github.com/nageshvkn/jinglegurus.git



